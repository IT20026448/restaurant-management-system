name: Deploy to Amazon EC2

on:
  push:
    branches:
      - master
      - deploy-to-ec2
  pull_request:
    branches:
      - master
      - deploy-to-ec2

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Set up environment variables
        run: |
          echo "MONGO_DB_URI=${{ secrets.MONGO_DB_URI }}" >> $GITHUB_ENV
          echo "ISSUER_URI=${{ secrets.ISSUER_URI }}" >> $GITHUB_ENV

      - name: Change to the project directory
        run: cd menu-management-service

      - name: Build with Maven
        run: mvn clean install
        working-directory: ./menu-management-service

      -name: Login to DockerHub
       run: docker login -u ${{secrets.DOCKERHUB_USERNAME}} -p ${{secrets.DOCKERHUB_PASSWORD}}

      -name: Build docker image
       run : docker build -t it20026448/restaurant-management-system .
      
      -name: Publish image to dockerhub
       run: docker push it20026448/restaurant-management-system:latest

  deploy:
    name: Deploy
    runs-on: [aws-ec2]
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Change to the project directory
        run: cd menu-management-service

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: built-artifacts
          path: menu-management-service/target

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f menu-management-service/Dockerfile ./menu-management-service
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Pull image from dockerhub
        run: docker pull it20026448/restaurant-management-system:latest
      - name: Delete old container
        run: docker rm -f menu-management-container
      - name: Run docker container
        run: docker run -d -p 8050:8050 --name menu-management-container it20026448/restaurant-management-system:latest
       

    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #       container-name: ${{ env.CONTAINER_NAME }}
    #       image: ${{ steps.build-image.outputs.image }}

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: ${{ env.ECS_SERVICE }}
    #       cluster: ${{ env.ECS_CLUSTER }}
    #       wait-for-service-stability: true